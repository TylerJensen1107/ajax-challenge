"use strict";
/*
    app.js, main Angular application script
    define your module and controllers here
*/

angular.module('CommentsApp', ['ui.bootstrap'])
    .config(function($httpProvider) {
        //Parse required two extra headers sent with every HTTP request: X-Parse-Application-Id, X-Parse-REST-API-Key
        //the first needs to be set to your application's ID value
        //the second needs to be set to your application's REST API key
        //both of these are generated by Parse when you create your application via their web site
        //the following lines will add these as default headers so that they are sent with every
        //HTTP request we make in this application
        $httpProvider.defaults.headers.common['X-Parse-Application-Id'] = 'wy0PRVgjKsa5OO84Ln8fBlVFxARrKzYVaE8vZuh7';
        $httpProvider.defaults.headers.common['X-Parse-REST-API-Key'] = 'jFmZWR5JNspmRDtweaThT5iTUFiPN2VF6hPScgrF';
    })
    .controller('CommentsController', function($scope, $http) {
        //this is the base URL for all comment objects managed by your application
        //requesting this with a GET will get all comments objects
        //sending a POST to this will insert a new comment object
        //sending a PUT to this URL + '/' + comment.objectId will update an existing comment
        //sending a DELETE to this URL + '/' + comment.objectId will delete an existing comment
        var commentsUrl = 'https://api.parse.com/1/classes/comments';

        $scope.refreshComments = function() {
            //get all comments
            $scope.loading = true;
            $http.get(commentsUrl)
                .success(function(responseData) {
                    //when returning a list of data, Parse will always return an
                    //object with one property called 'results', which will contain an
                    //array containing all the data objects
                    $scope.comments = responseData.results;
                })
                .error(function(err) {
                    console.log(err);
                    //notify user in some way
                })
                .finally(function() {
                    $scope.loading = false;
                });
        }; //$scope.refreshComments()

        $scope.refreshComments();

        //To tell it how to sort
        $scope.score = '-score';

        //initialize a new comment object on the scope for the new comment form
        $scope.newComment = {score: 0};

        $scope.addComment = function(comment) {
            $scope.submitting = true;
            $http.post(commentsUrl, comment)
                .success(function(responseData) {
                    //Parse will return the new objectId in the response data
                    //copy that to the comment we just inserted
                    comment.objectId = responseData.objectId;

                    //and add that comment to our comment list
                    $scope.comments.push(comment);

                    $scope.newComment = {score: 0};

                })
                .error(function(err) {
                    console.log(err);
                    //report to user in some way
                })
                .finally(function() {
                    $scope.submitting = false;
                });
        };

        var upvoteComment = {
            score: {__op: 'Increment', amount: 1}
        };

        var downvoteComment = {
            score: {__op: 'Increment', amount: -1}
        };

        //This is the function that gets called on an upvote
        $scope.upvoteComment = function(comment) {
            $scope.updating = true;
            $http.put(commentsUrl + '/' + comment.objectId, upvoteComment)
                .success(function(responseData) {
                })
                .error(function(err) {
                    console.log(err);
                    //notify user in some way
                })
                .finally(function() {
                    $scope.updating = false;
                });
        };

        //Function gets called on a downvote
        $scope.downvoteComment = function(comment) {
            //Only decremenent if the score is larger than 0
            if(comment.score > 0) {
                $scope.updating = true;
                $http.put(commentsUrl + '/' + comment.objectId, downvoteComment)
                    .success(function (responseData) {
                    })
                    .error(function (err) {
                        console.log(err);
                        //notify user in some way
                    })
                    .finally(function () {
                        $scope.updating = false;
                    });
            }
        };

        //Delete comment
        $scope.deleteComment = function(comment) {
            $scope.deleting = true;
            console.log(comment.objectId);
            $http.delete(commentsUrl + '/' + comment.objectId)
                .success(function(responseData) {

                    //Delete it on the page
                    var index = $scope.comments.indexOf(comment);
                    $scope.comments.splice(index, 1);

                })

                .error(function(err) {

                    console.log(err);

                }).finally(function() {
                    $scope.deleting = false;
                });
        };

    });
